\/* Users */
insert into users values (1,'admin','MD5:5f4dcc3b5aa765d61d8327deb882cf99', 'admin' );
insert into role values (1, 'admin-role');
insert into role values (2, 'emp-role');
insert into role values (3, 'user-role');
insert into users_role values (1,1);



CREATE OR REPLACE FUNCTION customer_price_change()
  RETURNS trigger AS
$BODY$DECLARE      changeprice_new int;
 DECLARE      repairprice_new int;
 BEGIN
	IF (TG_OP = 'UPDATE') THEN
		if((select count(*) from customer_defect where customer_id = new.id )!=0) then
			changeprice_new = (select sum(changeprice) from defect where id in (select defectlist_id from customer_defect where customer_id = new.id));
			update customer set changeprice = changeprice_new where id = new.id and (changeprice is null or changeprice != changeprice_new);
			repairprice_new = (select sum(repairprice) from defect where id in (select defectlist_id from customer_defect where customer_id = new.id));
			update customer set repairprice = repairprice_new where id = new.id and (repairprice is null or repairprice != repairprice_new);
		end if;
		
	END IF;
	IF (TG_OP = 'INSERT') THEN
			
	END IF;
	RETURN NULL;

END;$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION customer_price_change()
  OWNER TO postgres;


CREATE TRIGGER change_price_trigger
  AFTER INSERT OR UPDATE
  ON customer
  FOR EACH ROW
  EXECUTE PROCEDURE customer_price_change();


